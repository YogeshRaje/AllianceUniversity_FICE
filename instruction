***Task1-
-LogIn into Intel OneAPI Devcloud account
https://devcloud.intel.com/oneapi/

-Launch Jupyter Lab

***Task2- Open Terminal in Dev clould 
-create direcotry au
$mkdir au
-change directory to au
$cd au

###################################################################
Task2-
Basic commands-
-How to list all compute nodes and their properties
     $ pbsnodes

-How to list the free compute nodes (lower-case ‘L’)
    $     pbsnodes -l free

 -Listing compute node properties
    $ pbsnodes | sort | grep properties | grep

  -Targeting specific compute nodes
    $ pbsnodes | sort | grep properties | grep gpu 
    
    
####################################################################

Task3-Run IDP Python file on CPU , GPU and FPGA

step1)upload file demo_python1.py
step2)create run.sh file 
$nano run.sh 




add following line of code 
#!/bin/bash
%%qsub
cd $PBS_O_WORKDIR
python demo_python1.py

-save run.sh and return to terminal 

step3)- How to target specific GPUs
The command for submitting a job to a compute node hosting a GPU is: 

$qsub -l nodes=1:gpu:ppn=2 run.sh 

It will create two files- run.sh.e2081402  and run.sh.o2081402
 
-To check output run command on terminal 
>cat run.sh.o2081402

step4)Execute file on FPGA

qsub -l nodes=1:fpga_compile:ppn=2 -d . run.sh

FPGA Arria
qsub -l nodes=1:fpga_runtime:arria10:ppn=2 -d . run.sh

FPGA Stratix10
qsub -l nodes=1:fpga_runtime:stratix10:ppn=2 -d . run.sh


+++++++++++++

Task 4- How to use Intel Extension of sklearnex 

Add two lines of code to use Intel Extension Sklearn
***To Patch (sklearnex )==>
from sklearnex import patch_sklearn 
patch_sklearn()


Add two lines of code to do not use Intel Extension Sklearn
***To Unpatch (sklearnex)==>
from sklearnex import unpatch_sklearn
unpatch_sklearn()

***To executing code on Intel Sklearnex without changing code written in sklearn
>python -m sklearnex Class_patch.py

***command to convert .ipynb file into .py 
eg >jupyter nbconvert Class_patch.ipynb --to script
++++++++++++++++++++++++++

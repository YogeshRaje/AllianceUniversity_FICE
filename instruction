Day1 -
***Task1-
-LogIn into Intel OneAPI Devcloud account
https://devcloud.intel.com/oneapi/

-Launch Jupyter Lab

***Task2- Open Terminal in Dev clould 
-create direcotry au
$mkdir au
-change directory to au
$cd au

###################################################################
Task2-
Basic commands-
-How to list all compute nodes and their properties
     $ pbsnodes

-How to list the free compute nodes (lower-case ‘L’)
    $     pbsnodes -l free

 -Listing compute node properties
    $ pbsnodes | sort | grep properties | grep

  -Targeting specific compute nodes
    $ pbsnodes | sort | grep properties | grep gpu 
    
    
####################################################################

Task3-Run IDP Python file on CPU , GPU and FPGA

step1)upload file demo_python1.py
step2)create run.sh file 
$nano run.sh 




add following line of code 
#!/bin/bash
%%qsub
cd $PBS_O_WORKDIR
python demo_python1.py

-save run.sh and return to terminal 

step3)- How to target specific GPUs
The command for submitting a job to a compute node hosting a GPU is: 

$qsub -l nodes=1:gpu:ppn=2 run.sh 

It will create two files- run.sh.e2081402  and run.sh.o2081402
 
-To check output run command on terminal 
>cat run.sh.o2081402

step4)Execute file on FPGA

qsub -l nodes=1:fpga_compile:ppn=2 -d . run.sh

FPGA Arria
qsub -l nodes=1:fpga_runtime:arria10:ppn=2 -d . run.sh

FPGA Stratix10
qsub -l nodes=1:fpga_runtime:stratix10:ppn=2 -d . run.sh


+++++++++++++

Task 4- How to use Intel Extension of sklearnex 

Add two lines of code to use Intel Extension Sklearn
***To Patch (sklearnex )==>
from sklearnex import patch_sklearn 
patch_sklearn()


Add two lines of code to do not use Intel Extension Sklearn
***To Unpatch (sklearnex)==>
from sklearnex import unpatch_sklearn
unpatch_sklearn()

***To executing code on Intel Sklearnex without changing code written in sklearn
>python -m sklearnex Class_patch.py

***command to convert .ipynb file into .py 
eg >jupyter nbconvert Class_patch.ipynb --to script
++++++++++++++++++++++++++

Day3 -
Task1- Install Intel Distribution of Python on Laptop
-Search for intel distribution for python 
https://www.intel.com/content/www/us/en/developer/tools/oneapi/distribution-for-python.html

-click on Download the Stand-Alone Version
https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#python

-select Intel Distribution for Python for Windows*  to download and install it 


Task2- Demo - How to Activate and run sample program using Intel Distribution of Python on Laptop
**After installation of oneAPI:Intel Distribution for Python follow the following steps
  
-open anaconda Prompt
- cd  C:\Program Files (x86)\Intel\oneAPI\intelpython\python3.9\Scripts
-> activate
- Check the python version
> python --version

***It shows output as Python 3.9.10 :Intel Corporation . It means Intel OneAPI:Intel distribution is initialized on your local machine.

Task3 - demo of program of linear regression in jupyter notebook
-Create folder on desktop and change to that directory
>cd F:\FICE\AllianceUniversityPhase2\Day1\demo_Intel_OneAPI
>F:
-open jupyter notebook with Intel version on local machine 
> jupyter notebook 
-Jupyter notebook will open .

-Create new file and execute command 
!python --version

 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Task4 - installing OneAPI eseentials on devlcoud 

Task- How to Copy sample code on Terminal of Intel DevCloud
-Open terminal in devcloud 
>mkdir oneapidemo
>cd oneapidemo
>git clone https://github.com/IntelSoftware/Machine-Learning-using-oneAPI.git
>dir
*It will show directory Machine-Learning-using-oneAPI
-go to machine learning one API folder 
>cd Machine-Learning-using-oneAPI

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Task 5- Use of Modin for handling 80GB of dataset
1)Use modin80GBdataset_6123.ipynb file for handling 80 GB of dataset .
2)Use modin_demo.ipynb file to perform more exercises using modin
